<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jaxws="http://cxf.apache.org/jaxws"
	xmlns:cxf="http://cxf.apache.org/core" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:wsa="http://cxf.apache.org/ws/addressing"
	xmlns:http-conf="http://cxf.apache.org/transports/http/configuration"
	xsi:schemaLocation="http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd 
	http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd 
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://cxf.apache.org/transports/http/configuration http://cxf.apache.org/schemas/configuration/http-conf.xsd "
	default-lazy-init="true">
	
	<description>soap接口安全认证机制配置</description>
    
    <!--  方法:证书认证-->
    <cxf:bus> 
     	<cxf:inInterceptors>  
            <ref bean="serverWSS4JInInterceptor" />  
            <bean class="org.apache.cxf.interceptor.LoggingInInterceptor" />  
        </cxf:inInterceptors>  
        <cxf:outInterceptors>  
            <ref bean="serverWSS4JOutInterceptor" />  
            <bean class="org.apache.cxf.interceptor.LoggingOutInterceptor" />  
        </cxf:outInterceptors> 
    </cxf:bus>  
     
     
    <bean id="passwordCallback" class="${package}.biz.shared.oauth.OauthCertCallback"></bean>  
    <bean id="serverWSS4JInInterceptor" class="org.apache.cxf.ws.security.wss4j.WSS4JInInterceptor">  
        <property name="properties">  
            <map>  
                <entry key="action" value="Timestamp Encrypt Signature" />  
			       <!-- 服务器会自动在SOAP中拿到解码（私钥）的用户名，并在 PasswordCallback中取到密码。  
			                    公钥不需要密码。   -->
                <entry key="passwordCallbackRef">  
                    <ref bean="passwordCallback" />  
                </entry>  
                <entry key="decryptionPropFile" value="etc/Server_Decrypt.properties" />  
                <entry key="signaturePropFile" value="etc/Server_SignVerf.properties" />  
            </map>  
        </property>  
    </bean>  
    <bean id="serverWSS4JOutInterceptor" class="org.apache.cxf.ws.security.wss4j.WSS4JOutInterceptor">  
        <property name="properties">  
            <map>  
		       <!-- 此处配置需注意，当指定Signature时就必须像UsernameToken那样指定user和passwordCallbackRef。  
				                    因为假如我们没指定signatureUser或者encryptionUser，CXF将会使用user来替代之，而signatureUser的  
				                    密码必须通过passwordCallbackRef赋值。所以哪怕定义了signatureUser也必须同时定义user，  
				                    且不能为空。  公钥不需要密码。   -->
                <entry key="action" value="Timestamp Encrypt Signature" />  
                 <!--  MD5加密明文密码   -->
                <entry key="passwordType" value="PasswordDigest" />  
                 <!-- 该用户名只能在激活了UsernameToken时才能拿到并使用  -->
                <entry key="user" value="admin" />  
                <entry key="passwordCallbackRef">  
                    <ref bean="passwordCallback" />  
                </entry>  
                <entry key="encryptionPropFile" value="etc/Server_SignVerf.properties" />  
                <entry key="encryptionUser" value="clientkey" />  
                <entry key="signaturePropFile" value="etc/Server_Decrypt.properties" />  
                <entry key="signatureUser" value="serverkey" />  
            </map>  
        </property>  
    </bean>  
    
</beans>